/*
 * Autopsy Forensic Browser
 *
 * Copyright 2011 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.corecomponents;

import java.util.logging.Level;
import java.util.logging.Logger;
import org.sleuthkit.autopsy.coreutils.StringExtract;
import org.sleuthkit.autopsy.datamodel.DataConversion;
import org.sleuthkit.datamodel.Content;
import org.sleuthkit.datamodel.TskException;

/**
 * Paging view for DataContentViewer.
 */
public class OutputViewPanel extends javax.swing.JPanel {

    private static long currentOffset = 0;
    private static final long pageLength = 10240;
    private final byte[] data = new byte[(int) pageLength];
    private static int currentPage = 1;
    private int outputType;
    private Content dataSource;

    /**
     * Creates new form OutputViewPanel
     *
     * @param outputType type of panel to display: 1 = hex view, 2 = string view
     */
    public OutputViewPanel(int outputType) {
        initComponents();
        this.outputType = outputType;
        this.dataSource = null;

        // clear / reset the fields
        filePathLabel.setText("");
        currentPageLabel.setText("");
        totalPageLabel.setText("");
        ofLabel.setVisible(false);
        prevPageButton.setEnabled(false);
        nextPageButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextPageButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputViewPane = new javax.swing.JTextPane();
        prevPageButton = new javax.swing.JButton();
        totalPageLabel = new javax.swing.JLabel();
        ofLabel = new javax.swing.JLabel();
        currentPageLabel = new javax.swing.JLabel();
        pageLabel = new javax.swing.JLabel();
        filePathLabel = new javax.swing.JLabel();

        nextPageButton.setText(org.openide.util.NbBundle.getMessage(OutputViewPanel.class, "OutputViewPanel.nextPageButton.text")); // NOI18N
        nextPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextPageButtonActionPerformed(evt);
            }
        });

        outputViewPane.setFont(new java.awt.Font("Courier New", 0, 11));
        jScrollPane1.setViewportView(outputViewPane);

        prevPageButton.setText(org.openide.util.NbBundle.getMessage(OutputViewPanel.class, "OutputViewPanel.prevPageButton.text")); // NOI18N
        prevPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevPageButtonActionPerformed(evt);
            }
        });

        totalPageLabel.setText(org.openide.util.NbBundle.getMessage(OutputViewPanel.class, "OutputViewPanel.totalPageLabel.text")); // NOI18N

        ofLabel.setText(org.openide.util.NbBundle.getMessage(OutputViewPanel.class, "OutputViewPanel.ofLabel.text")); // NOI18N

        currentPageLabel.setText(org.openide.util.NbBundle.getMessage(OutputViewPanel.class, "OutputViewPanel.currentPageLabel.text")); // NOI18N

        pageLabel.setText(org.openide.util.NbBundle.getMessage(OutputViewPanel.class, "OutputViewPanel.pageLabel.text")); // NOI18N

        filePathLabel.setText(org.openide.util.NbBundle.getMessage(OutputViewPanel.class, "OutputViewPanel.filePathLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pageLabel)
                        .addGap(18, 18, 18)
                        .addComponent(currentPageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ofLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(totalPageLabel)
                        .addGap(18, 18, 18)
                        .addComponent(prevPageButton)
                        .addGap(18, 18, 18)
                        .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(276, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filePathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(574, 574, 574))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filePathLabel)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pageLabel)
                    .addComponent(currentPageLabel)
                    .addComponent(ofLabel)
                    .addComponent(totalPageLabel)
                    .addComponent(prevPageButton)
                    .addComponent(nextPageButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void prevPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevPageButtonActionPerformed
        //@@@ this is part of the code dealing with the data viewer. could be copied/removed to implement the scrollbar
        currentOffset -= pageLength;
        currentPage = currentPage - 1;
        currentPageLabel.setText(Integer.toString(currentPage));
        setDataView(dataSource, currentOffset, false, outputType);
    }//GEN-LAST:event_prevPageButtonActionPerformed

    private void nextPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextPageButtonActionPerformed
        //@@@ this is part of the code dealing with the data viewer. could be copied/removed to implement the scrollbar
        currentOffset += pageLength;
        currentPage = currentPage + 1;
        currentPageLabel.setText(Integer.toString(currentPage));
        setDataView(dataSource, currentOffset, false, outputType);
    }//GEN-LAST:event_nextPageButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentPageLabel;
    private javax.swing.JLabel filePathLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextPageButton;
    private javax.swing.JLabel ofLabel;
    private javax.swing.JTextPane outputViewPane;
    private javax.swing.JLabel pageLabel;
    private javax.swing.JButton prevPageButton;
    private javax.swing.JLabel totalPageLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the DataView (The tabbed panel)
     *
     * @param dataSource the content that want to be shown
     * @param offset the starting offset
     * @param reset whether to reset the dataView or not
     * @param outputType the type of the output. 1 = hex view, 2 = string view
     */
    public void setDataView(Content dataSource, long offset, boolean reset, int outputType) {
        try {
            this.dataSource = dataSource;

            int bytesRead = 0;
            if (!reset && dataSource.getSize() > 0) {
                bytesRead = dataSource.read(data, offset, pageLength); // read the data
            }

            // I set the -1 to for empty node or directory
            if (reset) {
                filePathLabel.setText("");
            }

            // set the data on the bottom and show it
            String text = "";
            Boolean setVisible = false;

            if (bytesRead > 0) {
                //text = DataConversion.getString(data, bytesRead, 4);
                final StringExtract sr = new StringExtract();
                StringExtract.StringExtractResult res = sr.extract(data, bytesRead, 0);
                text = res.getText();
                setVisible = true;
            }

            // disable or enable the next button
            if (offset + pageLength < dataSource.getSize()) {
                nextPageButton.setEnabled(true);
            } else {
                nextPageButton.setEnabled(false);
            }

            if (offset == 0) {
                prevPageButton.setEnabled(false);
                currentPage = 1; // reset the page number
            } else {
                prevPageButton.setEnabled(true);
            }

            // type 1 = hex view
            if (outputType == 1) {
                int showLength = bytesRead < pageLength ? bytesRead : (int) pageLength;
                outputViewPane.setText(DataConversion.byteArrayToHex(data, showLength, offset, outputViewPane.getFont()));
                outputViewPane.moveCaretPosition(0);
            }
            // type 2 = string view
            if (outputType == 2) {
                outputViewPane.setText(text);
                outputViewPane.moveCaretPosition(0);
            }

            if (setVisible) {
                int totalPage = (int) (dataSource.getSize() / pageLength) + 1;
                ofLabel.setVisible(true);
                totalPageLabel.setText(Integer.toString(totalPage));
                currentPageLabel.setText(Integer.toString(currentPage));
            } else {
                // reset or hide the labels
                ofLabel.setVisible(false);
                totalPageLabel.setText("");
                currentPageLabel.setText("");
            }
        } catch (TskException ex) {
            // TODO: maybe make bubble instead
            Logger.getLogger(OutputViewPanel.class.getName()).log(Level.WARNING, "Error while trying to set the display on the ouput view panel.", ex);
        }
    }
}
